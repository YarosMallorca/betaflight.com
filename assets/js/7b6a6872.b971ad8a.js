"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8484],{42312:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var t=r(85893),i=r(11151);const o={},s=void 0,a={id:"wiki/boards/archive/FF_PIKOBLX",title:"FF_PIKOBLX",description:"Note for Serial RX configuration (v3.3.0 and later)",source:"@site/docs/wiki/boards/archive/FF_PIKOBLX.md",sourceDirName:"wiki/boards/archive",slug:"/wiki/boards/archive/FF_PIKOBLX",permalink:"/docs/wiki/boards/archive/FF_PIKOBLX",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"wiki",previous:{title:"F3FC Racing",permalink:"/docs/wiki/boards/archive/F3FCRACING"},next:{title:"Flip32 F3 OSD",permalink:"/docs/wiki/boards/archive/FLIP32-F3-OSD"}},c={},d=[{value:"Note for Serial RX configuration (v3.3.0 and later)",id:"note-for-serial-rx-configuration-v330-and-later",level:3}];function l(e){const n={code:"code",em:"em",h3:"h3",li:"li",p:"p",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"note-for-serial-rx-configuration-v330-and-later",children:"Note for Serial RX configuration (v3.3.0 and later)"}),"\n",(0,t.jsxs)(n.p,{children:["FF",(0,t.jsxs)(n.em,{children:["PIKOBLX target explicitly sets ",(0,t.jsx)(n.code,{children:"serialrx_inverted"})," to ",(0,t.jsx)(n.code,{children:"ON"})," as target default value to accommodate Furious FPV's non-standard non-inverting SBUS receiver. This setting _inverts"]})," the protocol standard of ",(0,t.jsx)(n.em,{children:"inverted"})," signal and bring it to ",(0,t.jsx)(n.em,{children:"non-inverting"})," state."]}),"\n",(0,t.jsx)(n.p,{children:"Caveats with this arrangements"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["For standard SBUS receivers, ",(0,t.jsx)(n.code,{children:"serialrx_inverted"})," must be set to ",(0,t.jsx)(n.code,{children:"OFF"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["For all other serial RX, ",(0,t.jsx)(n.code,{children:"serialrx_inverted"})," must also be set to ",(0,t.jsx)(n.code,{children:"OFF"})," explicitly, as this setting does persist even when ",(0,t.jsx)(n.code,{children:"serialrx_provider"})," is changed. This phenomenon started with v3.3.0, when old setting of ",(0,t.jsx)(n.code,{children:"sbus_inversion"})," was changed to protocol independent ",(0,t.jsx)(n.code,{children:"serialrx_inverted"}),". The former only affected SBUS and not other protocols."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>a,a:()=>s});var t=r(67294);const i={},o=t.createContext(i);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);