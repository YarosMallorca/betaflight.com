"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7327],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},f="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=u(n),m=a,h=f["".concat(s,".").concat(m)]||f[m]||c[m]||i;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[f]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},20673:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const i={},o="Unified Targets for users",l={unversionedId:"old/configuration/Unified-Targets",id:"old/configuration/Unified-Targets",title:"Unified Targets for users",description:"* Determine the target to use.",source:"@site/docs/old/configuration/Unified-Targets.md",sourceDirName:"old/configuration",slug:"/old/configuration/Unified-Targets",permalink:"/docs/old/configuration/Unified-Targets",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/old/configuration/Supported-Sensors"},next:{title:"**For best results use Control F on your keyboard and paste the CLI command in question from your dump into the box that pops up. **",permalink:"/docs/old/configuration/cli/Betaflight-4.0-CLI-commands-_Work-in-progress"}},s={},u=[{value:"Working on firmware",id:"working-on-firmware",level:2},{value:"Combine and flash with the configurator",id:"combine-and-flash-with-the-configurator",level:3},{value:"make_config_hex.sh",id:"make_config_hexsh",level:3}],p={toc:u};function f(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"unified-targets-for-users"},"Unified Targets for users"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Determine the target to use.")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://betaflight.com/assets/img/betaflight/identify_target.png",alt:"Image that shows where to find the target name"})),(0,a.kt)("p",null,"The CLI is another method to get the target name."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# version\n# Betaflight / STM32F411 (S411) 4.2.0 Jun 14 2020 / 03:04:43 (8f2d21460) MSP API: 1.43\n# config: manufacturer_id: MTKS, board_name: MATEKF411, version: be0c9205, date: 2020-01-15T19:44:32Z\n# board: manufacturer_id: MTKS, board_name: MATEKF411\n")),(0,a.kt)("p",null,"The MCU target is ",(0,a.kt)("inlineCode",{parentName:"p"},"STM32F411")," and unified target config is ",(0,a.kt)("inlineCode",{parentName:"p"},"MATEKF411")," as the board_name describes the board type config.\nThe manufacturer is required to maintain a unified target configuration file."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Choose your target")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"MATEKF411 <-- Unified target\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"After you hit load firmware on the Firmware Flasher tab you will get the following release info:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Target: MATEKF411\nManufacturer ID: MTKS\nVersion: 4.2.0\nBinary: betaflight_4.2.0_STM32F411.hex\nDate: 14-06-2020 08:40\nUnified Target: MTKS-MATEKF411.config\nDate: 2020-01-15T19:44:32Z\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"FAQ"),":\nWhat is Manufacturer ID: ",(0,a.kt)("inlineCode",{parentName:"p"},"MTKS"),"\nWhat do these four letters mean? They refer to the manufacturer of the board. The list is available in  ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/betaflight/unified-targets/blob/master/Manufacturers.md"},"Manufacterers.md")),(0,a.kt)("p",null,"Tip: remember to save a backup of your config, like as a ",(0,a.kt)("inlineCode",{parentName:"p"},"diff"),", ",(0,a.kt)("em",{parentName:"p"},"before")," you flash a new version of betaflight.\n",(0,a.kt)("strong",{parentName:"p"},"Please note")," it is only save to import certain settings back. If unsure please start with a fresh configuration."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"Load Firmware [Online]")," then ",(0,a.kt)("inlineCode",{parentName:"p"},"Flash Firmware"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Connect to configurator, click on ",(0,a.kt)("inlineCode",{parentName:"p"},"Apply Custom Defaults")," when prompted:\n",(0,a.kt)("img",{parentName:"p",src:"https://betaflight.com/assets/img/betaflight/apply_custom_defaults_prompt.png",alt:"Picture of a notice that asks the user to apply custom defaults"})))),(0,a.kt)("p",null,"If you are having an issue with the unified target, try the legacy target for now, and file an issue on the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/betaflight/betaflight/issues"},"Issue Tracker")," if the unified target is missing anything that it should have."),(0,a.kt)("p",null,"Todo: which target for example?, also needs some images."),(0,a.kt)("h1",{id:"tips-for-working-with-unified-targets"},"Tips for working with Unified targets"),(0,a.kt)("h2",{id:"working-on-firmware"},"Working on firmware"),(0,a.kt)("p",null,"Save a copy of the unified target to your computer from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/betaflight/unified-targets/tree/master/configs/default"},"the repository"),", lets use ",(0,a.kt)("inlineCode",{parentName:"p"},"MTKS-MATEKF411.config")," as an example."),(0,a.kt)("p",null,"Open up the file in a text editor and take a look at the first line."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"#"," Betaflight / ",(0,a.kt)("strong",{parentName:"p"},"STM32F411")," (S411) 4.1.0 Jun 25 2019 / 10:27:57 (2a6e94d03) MSP API: 1.42")),(0,a.kt)("p",null,"In this case, ",(0,a.kt)("inlineCode",{parentName:"p"},"STM32F411")," is the processor target used, so when you compile a target you'll want to use ",(0,a.kt)("inlineCode",{parentName:"p"},"make TARGET=STM32F411")),(0,a.kt)("h3",{id:"combine-and-flash-with-the-configurator"},"Combine and flash with the configurator"),(0,a.kt)("p",null,"In the configurator load the ",(0,a.kt)("inlineCode",{parentName:"p"},".config")," file first, and then load the ",(0,a.kt)("inlineCode",{parentName:"p"},"betaflight_4.x.x_STM32F411.hex"),", now flash the firmware. On the first connect you will be prompted to ",(0,a.kt)("inlineCode",{parentName:"p"},"Apply Custom Defaults")," just like the regular flashing procedure"),(0,a.kt)("h3",{id:"make_config_hexsh"},"make_config_hex.sh"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"make_config_hex.sh")," is a script in ",(0,a.kt)("inlineCode",{parentName:"p"},"src/utils")," that can be used to combine a unified target configuration with a firmware image. The combined .hex may be useful to share with other users of the same flight controller. Users of the combined .hex will be prompted to ",(0,a.kt)("inlineCode",{parentName:"p"},"Apply Custom Defaults"),", just like the regular flashing procedure."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"srec_cat")," program is part of ",(0,a.kt)("a",{parentName:"p",href:"http://srecord.sourceforge.net/"},"srecord"),", which is available in ubuntu under universe. ",(0,a.kt)("inlineCode",{parentName:"p"},"apt install srecord")),(0,a.kt)("p",null,"Windows binaries to not seem available, but they do have ",(0,a.kt)("a",{parentName:"p",href:"http://srecord.sourceforge.net/windows.html"},"instructions")),(0,a.kt)("p",null,"Take a look at ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/betaflight/betaflight/blob/master/src/utils/make_config_hex.sh"},"src/utils/make_config_hex.sh")," for more information."))}f.isMDXComponent=!0}}]);