"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[864],{55558:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var t=i(85893),o=i(11151);const r={},a="Configuration Format",s={id:"development/Configuration-Format",title:"Configuration Format",description:"The configuration format and external protocol use some of the same concepts",source:"@site/docs/development/Configuration-Format.md",sourceDirName:"development",slug:"/development/Configuration-Format",permalink:"/docs/development/Configuration-Format",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"development",previous:{title:"Coding style",permalink:"/docs/development/CodingStyle"},next:{title:"Configuration Storage",permalink:"/docs/development/Configuration-Storage"}},d={},l=[{value:"Initialiion function.",id:"initialiion-function",level:2},{value:"Upgrading",id:"upgrading",level:2},{value:"Downgrading",id:"downgrading",level:2},{value:"Incompatible changes",id:"incompatible-changes",level:2}];function c(e){const n={h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"configuration-format",children:"Configuration Format"}),"\n",(0,t.jsx)(n.p,{children:"The configuration format and external protocol use some of the same concepts\nas SAE J1939. A parameter group (PG) is a set of parameters belonging\nto the same topic and are stored and sent together. A parameter group\ninstance has a unique parameter group number (PGN). Each parameter\nalso has a suspect parameter number (SPN) which can be used to get or\nset a parameter directly."}),"\n",(0,t.jsx)(n.p,{children:"When used as on-wire formats structures should be packed to give the\nsame in storage, in memory, and on-wire format. However care must be taken\nover memory alignment issues when packing structures."}),"\n",(0,t.jsx)(n.p,{children:"The PGs can be defined on a system-wide basis on a profile specific basis.\nprofiles can be activated on the fly."}),"\n",(0,t.jsx)(n.p,{children:"The storage consists of a header, zero or more PGs, a footer and a checksum.\nTo keep the RAM usage low, the parameters are written directly to flash\nwhich means that things that are only known at the end, such as the\nsize are stored in the footer. The checksum is written after the footer."}),"\n",(0,t.jsx)(n.p,{children:"The header holds:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The format number. This is bumped on incompatible changes."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Each stored PG holds:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The size of this record"}),"\n",(0,t.jsx)(n.li,{children:"The PGN"}),"\n",(0,t.jsx)(n.li,{children:"Version number"}),"\n",(0,t.jsx)(n.li,{children:"Profile number"}),"\n",(0,t.jsx)(n.li,{children:"Flags"}),"\n",(0,t.jsx)(n.li,{children:"The record format. This is bumped on incompatible changes."}),"\n",(0,t.jsx)(n.li,{children:"The PG data"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The footer holds:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A zero to mark the end of data"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The checksum is based on the header, PGs, and footer."}),"\n",(0,t.jsx)(n.p,{children:"The PG registrations hold similar but not identical information (e.g. the profile\nnumber is not known until it is stored)."}),"\n",(0,t.jsx)(n.h2,{id:"initialiion-function",children:"Initialiion function."}),"\n",(0,t.jsx)(n.p,{children:"All fields are reset to 0 upon initialisation and then if a reset function is\ndefined for the group then initial settings can be defined by the system."}),"\n",(0,t.jsx)(n.h2,{id:"upgrading",children:"Upgrading"}),"\n",(0,t.jsx)(n.p,{children:"Upgrades are done at the PG level and are detected by a difference in\nsize or version. New fields can be added to the end of the parameter group.\nThe reset and initialisation function is called before upgrading so new\nfields will first be reset to 0 and then initialised by the system if defined."}),"\n",(0,t.jsx)(n.p,{children:"Note: Currently the code does not check the version field."}),"\n",(0,t.jsx)(n.h2,{id:"downgrading",children:"Downgrading"}),"\n",(0,t.jsx)(n.p,{children:"Downgrades are done at the PG level. Any trailing, unrecognised\nfields will be silently dropped on load. Saving the config back to\nflash will discard these unrecognised fields."}),"\n",(0,t.jsx)(n.h2,{id:"incompatible-changes",children:"Incompatible changes"}),"\n",(0,t.jsx)(n.p,{children:"An incompatible change is where a field is inserted, deleted from the\nmiddle, reordered, resized (including changing the size of a contained array),\nor has the meaning changed. Such changes should be handled by bumping the\nPG version field or allocating a new PGN."})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>s,a:()=>a});var t=i(67294);const o={},r=t.createContext(o);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);