"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1391],{15859:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>l,contentTitle:()=>i,default:()=>a,frontMatter:()=>d,metadata:()=>c,toc:()=>h});var n=r(85893),t=r(11151);const d={},i="Paris Air Hero 32 / Acro Naze 32 Mini",c={id:"wiki/boards/legacy/PARISAIRHERO32",title:"Paris Air Hero 32 / Acro Naze 32 Mini",description:"This board uses the same firmware as the Naze32 board.",source:"@site/docs/wiki/boards/legacy/PARISAIRHERO32.md",sourceDirName:"wiki/boards/legacy",slug:"/wiki/boards/legacy/PARISAIRHERO32",permalink:"/docs/wiki/boards/legacy/PARISAIRHERO32",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"wiki",previous:{title:"AbuseMark Naze32",permalink:"/docs/wiki/boards/legacy/NAZE32"},next:{title:"PIKOBLX",permalink:"/docs/wiki/boards/legacy/PIKOBLX"}},l={},h=[{value:"Sensors",id:"sensors",level:2},{value:"Ports",id:"ports",level:2},{value:"Pinouts",id:"pinouts",level:2},{value:"Serial Ports",id:"serial-ports",level:2}];function o(e){const s={code:"code",h1:"h1",h2:"h2",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"paris-air-hero-32--acro-naze-32-mini",children:"Paris Air Hero 32 / Acro Naze 32 Mini"}),"\n",(0,n.jsx)(s.p,{children:"This board uses the same firmware as the Naze32 board."}),"\n",(0,n.jsx)(s.h2,{id:"sensors",children:"Sensors"}),"\n",(0,n.jsx)(s.p,{children:"MPU6500 via SPI interface."}),"\n",(0,n.jsx)(s.h2,{id:"ports",children:"Ports"}),"\n",(0,n.jsx)(s.p,{children:"6 x 3pin ESC / Servo outputs\n1 x 8pin JST connector (PPM/PWM/UART2)\n1 x 4pin JST connector (UART3/I2C)"}),"\n",(0,n.jsx)(s.h2,{id:"pinouts",children:"Pinouts"}),"\n",(0,n.jsx)(s.p,{children:"The 10 pin RC I/O connector has the following pinouts when used in RX_PPM/RX_SERIAL mode."}),"\n",(0,n.jsx)(s.p,{children:"From right to left when looking at the socket from the edge of the board."}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Pin"}),(0,n.jsx)(s.th,{children:"Function"}),(0,n.jsx)(s.th,{children:"Notes"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"1"}),(0,n.jsx)(s.td,{children:"Ground"}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"2"}),(0,n.jsx)(s.td,{children:"+5V"}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"3"}),(0,n.jsx)(s.td,{children:"RX_PPM"}),(0,n.jsxs)(s.td,{children:["Enable ",(0,n.jsx)(s.code,{children:"feature RX_PPM"})]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"4"}),(0,n.jsx)(s.td,{children:"RSSI_ADC"}),(0,n.jsxs)(s.td,{children:["Enable ",(0,n.jsx)(s.code,{children:"feature RSSI_ADC"}),". Connect to the output of a PWM-RSSI conditioner, 0v-3.3v input"]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"5"}),(0,n.jsx)(s.td,{children:"USART2 TX"}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"6"}),(0,n.jsx)(s.td,{children:"USART2 RX"}),(0,n.jsx)(s.td,{children:"Built-in inverter"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"7"}),(0,n.jsx)(s.td,{children:"LED_STRIP"}),(0,n.jsxs)(s.td,{children:["Enable ",(0,n.jsx)(s.code,{children:"feature LED_STRIP"})]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"8"}),(0,n.jsx)(s.td,{children:"unused"}),(0,n.jsx)(s.td,{})]})]})]}),"\n",(0,n.jsx)(s.p,{children:"When SOFTSERIAL is enabled, LED_STRIP and CURRENT_METER are unavailable, but one SoftSerial port is made available to use instead."}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Pin"}),(0,n.jsx)(s.th,{children:"Function"}),(0,n.jsx)(s.th,{children:"Notes"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"7"}),(0,n.jsx)(s.td,{children:"SOFTSERIAL1 RX"}),(0,n.jsxs)(s.td,{children:["Enable ",(0,n.jsx)(s.code,{children:"feature SOFTSERIAL"})]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"8"}),(0,n.jsx)(s.td,{children:"SOFTSERIAL1 TX"}),(0,n.jsx)(s.td,{})]})]})]}),"\n",(0,n.jsx)(s.h2,{id:"serial-ports",children:"Serial Ports"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Value"}),(0,n.jsx)(s.th,{children:"Identifier"}),(0,n.jsx)(s.th,{children:"RX"}),(0,n.jsx)(s.th,{children:"TX"}),(0,n.jsx)(s.th,{children:"Notes"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"1"}),(0,n.jsx)(s.td,{children:"USART1"}),(0,n.jsx)(s.td,{children:"RX / PA10"}),(0,n.jsx)(s.td,{children:"TX / PA9 / TELEM"}),(0,n.jsx)(s.td,{children:"TELEM output is always inverted (for FrSky). Internally connected to USB port via CP2102 IC"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"2"}),(0,n.jsx)(s.td,{children:"USART2"}),(0,n.jsx)(s.td,{children:"RC4 / PA3"}),(0,n.jsx)(s.td,{children:"RC3 / PA2"}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"3"}),(0,n.jsx)(s.td,{children:"USART3"}),(0,n.jsx)(s.td,{children:"F3 / PB11"}),(0,n.jsx)(s.td,{children:"F2 / PB10"}),(0,n.jsx)(s.td,{children:"Flex port is configured as UART3 when port is configured"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"4"}),(0,n.jsx)(s.td,{children:"SOFTSERIAL1"}),(0,n.jsx)(s.td,{children:"RC5 / PA6"}),(0,n.jsx)(s.td,{children:"RC6 / PA7"}),(0,n.jsx)(s.td,{})]})]})]})]})}function a(e={}){const{wrapper:s}={...(0,t.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},11151:(e,s,r)=>{r.d(s,{Z:()=>c,a:()=>i});var n=r(67294);const t={},d=n.createContext(t);function i(e){const s=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),n.createElement(d.Provider,{value:s},e.children)}}}]);